// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Stat mocks base method.
func (m *MockFile) Stat(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat), ctx)
}

// MockDir is a mock of Dir interface.
type MockDir struct {
	ctrl     *gomock.Controller
	recorder *MockDirMockRecorder
}

// MockDirMockRecorder is the mock recorder for MockDir.
type MockDirMockRecorder struct {
	mock *MockDir
}

// NewMockDir creates a new mock instance.
func NewMockDir(ctrl *gomock.Controller) *MockDir {
	mock := &MockDir{ctrl: ctrl}
	mock.recorder = &MockDirMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDir) EXPECT() *MockDirMockRecorder {
	return m.recorder
}

// Ls mocks base method.
func (m *MockDir) Ls(ctx context.Context) ([]Dir, []File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ls", ctx)
	ret0, _ := ret[0].([]Dir)
	ret1, _ := ret[1].([]File)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Ls indicates an expected call of Ls.
func (mr *MockDirMockRecorder) Ls(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ls", reflect.TypeOf((*MockDir)(nil).Ls), ctx)
}

// Name mocks base method.
func (m *MockDir) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDirMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDir)(nil).Name))
}
